# WEB SCRAPING WITH BEAUTIFUL SOUP
----------------------------------

* Introduction
--------------
Before we get started, a quick note on prerequisites: This course requires knowledge of Python. Also some understanding of the Python library Pandas will be helpful later on in the 
lesson, but isn’t totally necessary. If you haven’t already, check out those courses before taking this one. Okay, let’s get scraping!

In Data Science, we can do a lot of exciting work with the right dataset. Once we have interesting data, we can use Pandas or Matplotlib to analyze or visualize trends. But how do we get 
that data in the first place?

If it’s provided to us in a well-organized csv or json file, we’re lucky! Most of the time, we need to go out and search for it ourselves.

Often times you’ll find the perfect website that has all the data you need, but there’s no way to download it. This is where BeautifulSoup comes in handy to scrape the HTML. If we find 
the data we want to analyze online, we can use BeautifulSoup to grab it and turn it into a structure we can understand. This Python library, which takes its name from a song in Alice in 
Wonderland, allows us to easily and quickly take information from a website and put it into a DataFrame.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve used BeautifulSoup to take the turtle data from the Shellter website in the browser and put it into a DataFrame.

Explore the website a bit. Then, print the DataFrame turtles to see how this data is organized.

script.py
---------
from preprocess import turtles
print(turtles)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Rules of Scraping
-------------------
When we scrape websites, we have to make sure we are following some guidelines so that we are treating the websites and their owners with respect.

Always check a website’s Terms and Conditions before scraping. Read the statement on the legal use of data. Usually, the data you scrape should not be used for commercial purposes.

Do not spam the website with a ton of requests. A large number of requests can break a website that is unprepared for that level of traffic. As a general rule of good practice, make one 
request to one webpage per second.

If the layout of the website changes, you will have to change your scraping code to follow the new structure of the site.

* Instructions
--------------
Checkpoint 1 Passed
1.
Create a variable called respect that holds the string "I will not spam websites".

script.py
---------
respect = "I will not spam websites"

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Requests
----------
In order to get the HTML of the website, we need to make a request to get the content of the webpage. To learn more about requests in a general sense, you can check out this article.

Python has a requests library that makes getting content really easy. All we have to do is import the library, and then feed in the URL we want to GET:

	import requests

	webpage = requests.get('https://www.codecademy.com/articles/http-requests')
	print(webpage.text)

This code will print out the HTML of the page.

We don’t want to unleash a bunch of requests on any one website in this lesson, so for the rest of this lesson we will be scraping a local HTML file and pretending it’s an HTML file hosted online.

* Instructions
--------------
Checkpoint 1 Passed
1.
Import the requests library.

Checkpoint 2 Passed
2.
Make a GET request to the URL containing the turtle adoption website:

https://content.codecademy.com/courses/beautifulsoup/shellter.html

Store the result of your request in a variable called webpage_response.

Checkpoint 3 Passed
3.
Store the content of the response in a variable called webpage by using .content.

Print webpage out to see the content of this HTML.

script.py
---------
import requests

webpage_response = requests.get('https://content.codecademy.com/courses/beautifulsoup/shellter.html')

webpage = webpage_response.content

print(webpage)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The BeautifulSoup Object
--------------------------
When we printed out all of that HTML from our request, it seemed pretty long and messy. How could we pull out the relevant information from that long string?

BeautifulSoup is a Python library that makes it easy for us to traverse an HTML page and pull out the parts we’re interested in. We can import it by using the line:

	from bs4 import BeautifulSoup

Then, all we have to do is convert the HTML document to a BeautifulSoup object!

If this is our HTML file, rainbow.html:

	<body>
  		<div>red</div>
  		<div>orange</div>
  		<div>yellow</div>
  		<div>green</div>
  		<div>blue</div>
  		<div>indigo</div>
  		<div>violet</div>
	</body>

	soup = BeautifulSoup("rainbow.html", "html.parser")

"html.parser" is one option for parsers we could use. There are other options, like "lxml" and "html5lib" that have different advantages and disadvantages, but for our purposes we will be 
using "html.parser" throughout.

With the requests skills we just learned, we can use a website hosted online as that HTML:

	webpage = requests.get("http://rainbow.com/rainbow.html")
	soup = BeautifulSoup(webpage.content, "html.parser")

When we use BeautifulSoup in combination with pandas, we can turn websites into DataFrames that are easy to manipulate and gain insights from.

* Instructions
--------------
Checkpoint 1 Passed
1.
Import the BeautifulSoup package.

Checkpoint 2 Passed
2.
Create a BeautifulSoup object out of the webpage content and call it soup. Use "html.parser" as the parser.

Print out soup! Look at how it contains all of the HTML of the page! We will learn how to traverse this content and find what we need in the next exercises.

script.py
---------
import requests
from bs4 import BeautifulSoup

webpage_response = requests.get('https://content.codecademy.com/courses/beautifulsoup/shellter.html')

webpage = webpage_response.content

soup = BeautifulSoup(webpage, "html.parser")

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Object Types
--------------
BeautifulSoup breaks the HTML page into several types of objects.

* Tags
------
A Tag corresponds to an HTML Tag in the original document. These lines of code:

	soup = BeautifulSoup('<div id="example">An example div</div><p>An example p tag</p>')
	print(soup.div)

Would produce output that looks like:

	<div id="example">An example div</div>

Accessing a tag from the BeautifulSoup object in this way will get the first tag of that type on the page.

You can get the name of the tag using .name and a dictionary representing the attributes of the tag using .attrs:

	print(soup.div.name)
	print(soup.div.attrs)

	div
	{'id': 'example'}

* NavigableStrings
------------------
NavigableStrings are the pieces of text that are in the HTML tags on the page. You can get the string inside of the tag by calling .string:

	print(soup.div.string)

	An example div

* Instructions
--------------
Checkpoint 1 Passed
1.
Print out the first p tag on the shellter.html page.

Checkpoint 2 Passed
2.
Print out the string associated with the first p tag on the shellter.html page.

script.py
---------
import requests
from bs4 import BeautifulSoup

webpage_response = requests.get('https://content.codecademy.com/courses/beautifulsoup/shellter.html')

webpage = webpage_response.content
soup = BeautifulSoup(webpage, "html.parser")

print(soup.p)
print(soup.p.string)

Output
------
<p class="text">Click to learn more about each turtle</p>
Click to learn more about each turtle

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Navigating by Tags
--------------------
To navigate through a tree, we can call the tag names themselves. Imagine we have an HTML page that looks like this:

	<h1>World's Best Chocolate Chip Cookies</h1>
	<div class="banner">
  		<h1>Ingredients</h1>
	</div>
	<ul>
  		<li> 1 cup flour </li>
  		<li> 1/2 cup sugar </li>
  		<li> 2 tbsp oil </li>
  		<li> 1/2 tsp baking soda </li>
  		<li> ½ cup chocolate chips </li> 
  		<li> 1/2 tsp vanilla <li>
  		<li> 2 tbsp milk </li>
	</ul>

If we made a soup object out of this HTML page, we have seen that we can get the first h1 element by calling:

	print(soup.h1)

	<h1>World's Best Chocolate Chip Cookies</h1>

We can get the children of a tag by accessing the .children attribute:

	for child in soup.ul.children:
    		print(child)

	<li> 1 cup flour </li>
	<li> 1/2 cup sugar </li>
	<li> 2 tbsp oil </li>
	<li> 1/2 tsp baking soda </li>
	<li> ½ cup chocolate chips </li> 
	<li> 1/2 tsp vanilla <li>
	<li> 2 tbsp milk </li>

We can also navigate up the tree of a tag by accessing the .parents attribute:

	for parent in soup.li.parents:
    		print(parent)

This loop will first print:

	<ul>
	<li> 1 cup flour </li>
	<li> 1/2 cup sugar </li>
	<li> 2 tbsp oil </li>
	<li> 1/2 tsp baking soda </li>
	<li> ½ cup chocolate chips </li>
	<li> 1/2 tsp vanilla </li>
	<li> 2 tbsp milk </li>
	</ul>

Then, it will print the tag that contains the ul (so, the body tag of the document). Then, it will print the tag that contains the body tag (so, the html tag of the document).

* Instructions
--------------
Checkpoint 1 Passed
1.
Loop through all of the children of the first div and print out each one.

script.py
---------
import requests
from bs4 import BeautifulSoup

webpage_response = requests.get('https://content.codecademy.com/courses/beautifulsoup/shellter.html')

webpage = webpage_response.content
soup = BeautifulSoup(webpage, "html.parser")

for child in soup.div.children:
    print(child)

Output
------
<h1>The Shellter</h1>


<span class="brag">The #1 Turtle Adoption website!</span>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Website Structure
-------------------
When we’re telling our Python script what HTML tags to grab, we need to know the structure of the website and what we’re looking for.

Many browsers, including Chrome, Firefox, and Safari, have Dev Tools that help you inspect a webpage and see what HTML elements it is composed of.

First, learn how to use DevTools.

Then, when you’re preparing to scrape a website, first inspect the HTML to see where the info you are looking for is located on the page.

* Instructions
--------------
Open your inspector tools and play around with the website in the browser. What are the tags, classes, or ids that could help you navigate around this page?

https://content.codecademy.com/courses/beautifulsoup/shellter.html

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Find
------
Beautiful Soup offers two methods for traversing the HTML tags on a webpage, .find() and .find_all(). Both methods can take just a tag name as a parameter but will return slightly 
different information.

.find() returns the first tag that matches the parameter or None if there are no tags that match.

	print(soup.find("h1"))

	<h1>World's Best Chocolate Chip Cookies</h1>

Note that this produces the same result as directly accessing h1 through the soup object:

	print(soup.h1)

If we want to find all of the occurrences of a tag, instead of just the first one, we can use .find_all(). .find_all() returns a list of all the tags that match — if no tags match, it 
returns an empty list.

	print(soup.find_all("h1"))

	[<h1>World's Best Chocolate Chip Cookies</h1>, <h1>Ingredients</h1>]

.find() and .find_all() are far more flexible than just accessing elements directly through the soup object. With these methods, we can use regexes, attributes, or even functions to 
select HTML elements more intelligently.

* Using Regex
-------------
Regular Expressions (regex) is a way to match patterns in a text. We cover Regular Expressions in more depth here. This is invaluable for finding tags on a webpage.

What if we want every <ol> and every <ul> that the page contains? We will use the .compile() function from the re module. We will use the regex: "[ou]l" which means “match either o or u 
and l“.

We can select both of these types of elements with a regex in our .find_all():

	import re
	soup.find_all(re.compile("[ou]l"))

What if we want all of the h1 - h9 tags that the page contains? Regex to the rescue again! The expression "h[1-9]" means h and any number between 1 and 9.

	import re
	soup.find_all(re.compile("h[1-9]"))

* Using Lists
-------------
We can also just specify all of the elements we want to find by supplying the function with a list of the tag names we are looking for:

	soup.find_all(['h1', 'a', 'p'])

* Using Attributes
------------------
We can also try to match the elements with relevant attributes. We can pass a dictionary to the attrs parameter of find_all with the desired attributes of the elements we’re looking for. 
If we want to find all of the elements with the "banner" class, for example, we could use the command:

	soup.find_all(attrs={'class':'banner'})

Or, we can specify multiple different attributes! What if we wanted a tag with a "banner" class and the id "jumbotron"?

	soup.find_all(attrs={'class':'banner', 'id':'jumbotron'})

* Using A Function
------------------
If our selection starts to get really complicated, we can separate out all of the logic that we’re using to choose a tag into its own function. Then, we can pass that function into 
.find_all()!

	def has_banner_class_and_hello_world(tag):
    		return tag.attr('class') == "banner" and tag.string == "Hello world"

	soup.find_all(has_banner_class_and_hello_world)

This command would find an element that looks like this:

	<div class="banner">Hello world</div>

but not an element that looks like this:

	<div>Hello world</div>

Or this:

	<div class="banner">What's up, world!</div>

* Instructions
--------------
Checkpoint 1 Passed
1.
Find all of the a elements on the page and store them in a list called turtle_links.

Checkpoint 2 Passed
2.
Print turtle_links. Is this what you expected?

script.py
---------
import requests
from bs4 import BeautifulSoup

webpage_response = requests.get('https://content.codecademy.com/courses/beautifulsoup/shellter.html')

webpage = webpage_response.content
soup = BeautifulSoup(webpage, "html.parser")

turtle_links = soup.find_all("a")

print(turtle_links)


Output
------
[<a class="more-info" href="aesop.html"><img class="headshot" src="aesop.png"/></a>, <a class="more-info" href="caesar.html"><img class="headshot" src="caesar.png"/></a>, 
<a class="more-info" href="sulla.html"><img class="headshot" src="sulla.png"/></a>, <a class="more-info" href="spyro.html"><img class="headshot" src="spyro.png"/></a>, 
<a class="more-info" href="zelda.html"><img class="headshot" src="zelda.png"/></a>, <a class="more-info" href="bandicoot.html"><img class="headshot" src="bandicoot.png"/></a>, 
<a class="more-info" href="hal.html"><img class="headshot" src="hal.png"/></a>, <a class="more-info" href="mock.html"><img class="headshot" src="mock.png"/></a>, 
<a class="more-info" href="sparrow.html"><img class="headshot" src="sparrow.png"/></a>]

------------------------------------------------------------------------------------------------------------------------------------------------------------------







































































































































































